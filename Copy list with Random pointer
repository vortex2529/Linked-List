/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* helperOld(Node* head,unordered_map<Node*,Node*> &mp){
        if(!head) return head;

        Node* newHead = new Node(head->val);
        mp[head] = newHead;
        newHead->next =  helperOld(head->next,mp);

        if(head->random){
            newHead->random = mp[head->random];
        }
        return newHead;
    }



    Node* copyRandomList(Node* head) {
        // S.C=O(N)
        // unordered_map<Node*,Node*> mp;
        // return helperOld(head,mp);

        // S.C = O(1)

        if(!head) return 0;
        Node* it = head;
        while(it){
            Node* clonedNode = new Node(it->val);
            clonedNode->next = it->next;
            it->next = clonedNode;
            it = it->next->next;
        }


        it = head;
        while(it){
            Node*clonedNode = it->next;
            clonedNode->random = it->random? it->random->next:nullptr;
            it = it->next->next;
        }

        it = head;
        Node* clonedHead = it->next;
        while(it){
            Node* clonedNode = it->next;
            it->next = it->next->next;
            if(clonedNode->next){
                clonedNode->next = clonedNode->next->next;
            }
            it = it->next;
        }    
        return clonedHead;


    }
};
