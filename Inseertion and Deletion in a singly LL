#include <iostream>
using namespace std;

class Node
{
  public:
    int data;
    Node* next;

    Node()
    {
      this->data = 0;
      this->next = NULL;
    }

     Node(int data)
    {
      this->data = data;
      this->next = NULL;
    }

    ~Node()
    {
      cout<<"Node with value:"<<this->data<<" deleted "<<endl;
    }
};

void print(Node * head)
{
  Node* temp = head;
  while(temp != NULL)
  {
    cout<<temp->data<<" ";
    temp = temp->next;
  }
}

void insertAtHead(Node* &head,Node* &tail,int data)
{
  // check for empty LL
  if(head == NULL)
  {
    Node* newNode=new Node(data);
    head = newNode;
    tail = newNode;
    return;
  }
  // step-1 (creation of newNode)
  Node* newNode = new Node(data); 
  // step-2 (point karo newnode ke next ko head se)
  newNode->next = head;
  // step-3 ( head ko newnode pe le aao)
  head = newNode;
}

void insertAtTail(Node* &head,Node* &tail,int data)
{
  // check for empty LL
  if(head == NULL)
  {
    Node* newNode=new Node(data);
    head = newNode;
    tail = newNode;
    return;
  }
  // step-1 (creation of newNode)
  Node* newNode = new Node(data); 
  // step-2 (connect with tail node)

  tail->next =newNode;
  // step-3 ( update tail node)
  tail = newNode;
}

int findLength(Node* &head)
{
  int len =0;
  Node* temp = head;
  while(temp != NULL)
    {
      temp = temp->next;
      len++;
    }
  return len;
}
void insertAtposition(Node* &head,Node* &tail,int position,int data)
{
  // check for empty
  if(head == NULL)
  {
    Node* newNode=new Node(data);
    head = newNode;
    tail = newNode;
    return;
  }

  if(position == 0)
  {
    insertAtHead(head,tail,data);
    return;
  }
  int len = findLength(head);
  if(position == len)
  {
    insertAtTail(head,tail,data);
    return; 
  }
  // step-1 (find the position of :prev & curr)
  int i=1;
  Node* prev = head;
  while(i<position)
  {
    prev = prev->next;
    i++; 
  }
  Node* curr = prev->next;

  // step-2 (create a newNode)
  Node* newNode=new Node(data);

  // step-3 (connect newNode with curr)
  newNode->next = curr;
  // step-4 (connect prev node with newNode )
  prev->next = newNode;


}

void DeleteNode(Node* &head,Node* & tail,int position)
{
  if(head == NULL)
  {
    cout<<"Cannot delete as LL is empty"<<endl;
  }
// delete at Head
  if(position == 1)
  {
    Node*temp =head;
    head= head->next;
    temp->next =NULL;
    delete temp;
    return;
  }

  // delete at Tail
  int len = findLength(head);
  if(position == len)
  {
    // step-1 (find prev)
    int i=1;
    Node* prev =head;
    while(i<position-1)
    {
      prev= prev -> next;
      i++;
    }
    // step-2 (prev->next = null)
    prev->next = NULL;
    // step-3 (create a temp)
    Node* temp = tail;
    // step-4 (tail ko prev pe le aao)
    tail= prev;
    // step-5 (delete temp)
    delete temp;
    return;

  }

  // delete middle Node
  // step-1 (find prev & curr)
  int i=1;
  Node* prev=head;
  while(i<position-1)
  {
    prev= prev->next;
    i++;
  }
  Node* curr = prev->next;
  // step-2
  prev->next = curr->next;
  // step-3
  curr->next =NULL;
  // step-4
  delete curr;
}


int main() 
{
  // Basic Method
  // Node* first= new Node(10);
  // Node* second= new Node(20);
  // Node* third= new Node(30);
  // Node* fourth= new Node(40);
  // Node* fifth= new Node(50);

  // first->next = second;
  // second->next = third;
  // third->next = fourth;
  // fourth->next = fifth;

  // Insertion at Head  

  // Node* head= NULL;
  // Node* tail= NULL;
  // insertAtHead(head,tail,20);
  // insertAtHead(head,tail,30);
  // insertAtHead(head,tail,40);
  // insertAtHead(head,tail,50);


  // Insertion at Tail 
  Node* head= NULL;
  Node* tail= NULL;

  insertAtTail(head,tail,10);
  insertAtTail(head,tail,40);
  insertAtTail(head,tail,90);
  insertAtTail(head,tail,100);
  insertAtposition(head,tail,2,50);
  insertAtposition(head,tail,1,112);
  insertAtposition(head,tail,0,11);

  cout<<"Printing LL :"<<endl;

  print(head);
  cout<<endl;
  cout<<endl;

  cout<<"Printing LL after deletion:\n"<<endl;

  DeleteNode(head,tail,1);
  DeleteNode(head,tail,6);

  print(head);
  cout<<endl;
  cout<<endl;

  cout<<"Printing LL after middle deletion:\n"<<endl;

  DeleteNode(head,tail,3);

  print(head);

  return 0;
}
